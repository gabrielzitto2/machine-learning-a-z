x=read.csv("Sandler - Página1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
hist(vetor)
x=read.csv("Sandler - Pagina1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
hist(vetor)
x=read.csv("Sandler - Pagina1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
hist(vetor)
x=read.csv("Sandler - Pagina1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
source('C:/Users/gabri/Desktop/projeto.R')
x=read.csv("arq.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
getwd()
x=read.csv("Sandler - Pagina1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
x=read.csv("Sandler - Pagina1.csv")
vetor=(y$NOTAS)
y=sum(vetor)
print(y)
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
x=read.csv("Sandler - Pagina1.csv")
notas=(x$NOTAS)
media = 0
qtd = 0
for(e in vetor){
media = media + e
qtd = qtd + 1
}
print(media/qtd)
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
netwc()
getwc()
getwd()
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
for (j in 1990:2020) {
anosExt = c(anosExt, j) # utilizaremos esse vetor para argumento do histograma
# nos permitira criar colunas mais precisas (breaks)
}
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
x=read.csv("Sandler - Página1.csv")
notas=(x$NOTAS)
ano=(x$ANO)
tit=(x$TITULOS)
# início da questão (2) ---------------------------------
# nessa questão, o problema da média foi resolvido da seguinte forma criando uma variável média a ser incrementada com cada
# valor do vetor de notas dividida pela váriável qtd que corresponde ao total de elementos do vetor
media = 0
qtd = 0
for(e in notas){
media = media + e
qtd = qtd + 1
}
print(media/qtd)
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
clear
clear()
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
setwd("~/mlaz")
setwd("~/mlaz/Part 2 - Regression/Section 4 - Simple Linear Regression")
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
library(ggplot2)
# Visualising the Training set results
install.packages('ggplot2')
library(ggplot2)
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
setwd("~/mlaz/Part 2 - Regression/Section 5 - Multiple Linear Regression/Homework_Solutions")
# Multiple Linear Regression
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Profit ~ .,
data = training_set)
View(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
training_set
training_set = backwardElimination(training_set, SL)
training_set
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(regressor)
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
training_set = backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(x)
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
training_set = backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(x)
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(x)
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
training_set2 = backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(x)
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
training_set2 = backwardElimination(training_set, SL)
backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(x)
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
# summary(regressor)
# # Optional Step: Remove State2 only (as opposed to removing State directly)
# # regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + factor(State, exclude = 2),
# #                data = dataset)
# # summary(regressor)
# regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
#                data = dataset)
# summary(regressor)
# regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
#                data = dataset)
# summary(regressor)
# regressor = lm(formula = Profit ~ R.D.Spend,
#                data = dataset)
# summary(regressor)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
y_pred = predict(regressor, newdata = test_set)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(x)
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(dataset, SL)
training_set2 = backwardElimination(dataset, SL)
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
training_set2 = backwardElimination(dataset, SL)
regressor2 = lm(formula = Profit ~ .,
data = training_set2)
# Predicting the Test set results
y_pred2 = predict(regressor2, newdata = test_set)
y_pred2
y_pred
regressor2 = lm(formula = Profit ~ .,
data = training_set2)
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
newDataset = backwardElimination(dataset, SL)
set.seed(123)
split = sample.split(newDataset$Profit, SplitRatio = 0.8)
training_set = subset(newDataset, split == TRUE)
test_set = subset(newDataset, split == FALSE)
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
y_pred2 = predict(regressor, newdata = test_set)
y_pred2
y_pred
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
newDataset = backwardElimination(dataset, SL)
set.seed(123)
split = sample.split(newDataset$Profit, SplitRatio = 0.8)
training_set = subset(newDataset, split == TRUE)
test_set = subset(newDataset, split == FALSE)
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
y_pred2 = predict(regressor, newdata = test_set)
y_pred2
y_pred
newDataset
