x=read.csv("Sandler - Página1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
hist(vetor)
x=read.csv("Sandler - Pagina1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
hist(vetor)
x=read.csv("Sandler - Pagina1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
hist(vetor)
x=read.csv("Sandler - Pagina1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
source('C:/Users/gabri/Desktop/projeto.R')
x=read.csv("arq.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
getwd()
x=read.csv("Sandler - Pagina1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
x=read.csv("Sandler - Pagina1.csv")
vetor=(y$NOTAS)
y=sum(vetor)
print(y)
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
x=read.csv("Sandler - Pagina1.csv")
notas=(x$NOTAS)
media = 0
qtd = 0
for(e in vetor){
media = media + e
qtd = qtd + 1
}
print(media/qtd)
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
netwc()
getwc()
getwd()
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
for (j in 1990:2020) {
anosExt = c(anosExt, j) # utilizaremos esse vetor para argumento do histograma
# nos permitira criar colunas mais precisas (breaks)
}
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
x=read.csv("Sandler - Página1.csv")
notas=(x$NOTAS)
ano=(x$ANO)
tit=(x$TITULOS)
# início da questão (2) ---------------------------------
# nessa questão, o problema da média foi resolvido da seguinte forma criando uma variável média a ser incrementada com cada
# valor do vetor de notas dividida pela váriável qtd que corresponde ao total de elementos do vetor
media = 0
qtd = 0
for(e in notas){
media = media + e
qtd = qtd + 1
}
print(media/qtd)
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
clear
clear()
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
setwd("~/mlaz/Part 2 - Regression/Section 6 - Polynomial Regression/Polynomial_Regression")
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
lin_reg = lm(formula = Salary ~ .,
data = dataset)
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
poly_reg
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
predict(lin_reg, data.frame(Level = 6.5))
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
predict(poly_reg, data.frame(Level0 = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
setwd("~/mlaz/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)")
install.packages('e1071')
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression',
kernel = 'radial')
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression',
kernel = 'radial')
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression',
kernel = 'radial')
y_pred = predict(regressor, data.frame(Level = 6.5))
source('~/mlaz/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)/svr.R')
source('~/mlaz/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)/svr.R')
