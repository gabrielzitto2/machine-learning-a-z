x=read.csv("Sandler - Página1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
hist(vetor)
x=read.csv("Sandler - Pagina1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
hist(vetor)
x=read.csv("Sandler - Pagina1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
hist(vetor)
x=read.csv("Sandler - Pagina1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
source('C:/Users/gabri/Desktop/projeto.R')
x=read.csv("arq.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
getwd()
x=read.csv("Sandler - Pagina1.csv")
vetor=(x$NOTAS)
y=sum(vetor)
print(y)
x=read.csv("Sandler - Pagina1.csv")
vetor=(y$NOTAS)
y=sum(vetor)
print(y)
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
x=read.csv("Sandler - Pagina1.csv")
notas=(x$NOTAS)
media = 0
qtd = 0
for(e in vetor){
media = media + e
qtd = qtd + 1
}
print(media/qtd)
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
netwc()
getwc()
getwd()
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
for (j in 1990:2020) {
anosExt = c(anosExt, j) # utilizaremos esse vetor para argumento do histograma
# nos permitira criar colunas mais precisas (breaks)
}
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
x=read.csv("Sandler - Página1.csv")
notas=(x$NOTAS)
ano=(x$ANO)
tit=(x$TITULOS)
# início da questão (2) ---------------------------------
# nessa questão, o problema da média foi resolvido da seguinte forma criando uma variável média a ser incrementada com cada
# valor do vetor de notas dividida pela váriável qtd que corresponde ao total de elementos do vetor
media = 0
qtd = 0
for(e in notas){
media = media + e
qtd = qtd + 1
}
print(media/qtd)
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
source('C:/Users/gabri/Desktop/projeto.R')
clear
clear()
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
source('C:/Users/gabri/Desktop/gos2_pvsa.R')
install.packages('arules')
library(arules)
dataset = read.csv('Market_Basket_Optimisation.csv', header = FALSE)
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
# Training Apriori on the dataset
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2))
# Visualising the results
inspect(sort(rules, by = 'lift')[1:10])
setwd("~/mlaz/Part 5 - Association Rule Learning/Section 28 - Apriori")
dataset = read.csv('Market_Basket_Optimisation.csv', header = FALSE)
dataset = read.transactions('Market_Basket_Optimisation.csv', sep = ',', rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN = 10)
rules = apriori(data = dataset, parameter = list(support = 0.004, confidence = 0.2))
# Visualising the results
inspect(sort(rules, by = 'lift')[1:10])
rules = apriori(data = dataset, parameter = list(support = 0.5, confidence = 0.2))
# Visualising the results
inspect(sort(rules, by = 'lift')[1:10])
